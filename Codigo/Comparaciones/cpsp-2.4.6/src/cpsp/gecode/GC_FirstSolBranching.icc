/*
 *  Main authors:
 *     Martin Mann http://www.bioinf.uni-freiburg.de/~mmann/
 *
 *  Contributing authors:
 *     Sebastian Will http://www.bioinf.uni-freiburg.de/~will/
 *
 *  Copyright:
 *     Martin Mann, 2007
 *
 *  This file is part of the CPSP-tools package:
 *     http://www.bioinf.uni-freiburg.de/sw/cpsp/
 *
 *  See the file "LICENSE" for information on usage and
 *  redistribution of this file, and for a
 *     DISCLAIMER OF ALL WARRANTIES.
 *
 */

  /*
   * Generic branching based on variable/value selection
   *
   */

#include <iostream>
  template <class View, class Val, class ViewSel, class ValSel>
  forceinline
  FirstSolBranching<View,Val,ViewSel,ValSel>::FirstSolBranching(Gecode::Space* home, Gecode::ViewArray<View>& x0)
    : Gecode::ViewValBranching<View,Val,ViewSel,ValSel>(home,x0), firstSolFound(false), myLvl(0) 
  {
  	solutionLvl = 0;
  }


  template <class View, class Val, class ViewSel, class ValSel>
  forceinline
  FirstSolBranching<View,Val,ViewSel,ValSel>::FirstSolBranching(Gecode::Space* home, bool share, FirstSolBranching& b)
    : Gecode::ViewValBranching<View,Val,ViewSel,ValSel>(home,share,b),
      firstSolFound(b.firstSolFound), myLvl(b.myLvl)
  {
  }

  template <class View, class Val, class ViewSel, class ValSel>
  Gecode::Actor*
  FirstSolBranching<View,Val,ViewSel,ValSel>::copy(Gecode::Space* home, bool share) {
    return new (home)
      FirstSolBranching<View,Val,ViewSel,ValSel>(home,share,*this);
  }

  template <class View, class Val, class ViewSel, class ValSel>
  bool
  FirstSolBranching<View,Val,ViewSel,ValSel>::status(const Gecode::Space *home) const {
//    if ( solutionLvl != 0 ) {
//    	if (myLvl == 1)
//    		solutionLvl = 0; 
//		return false;
//    } else {
    	bool still2branch = Gecode::ViewValBranching<View,Val,ViewSel,ValSel>::status(home);
		if ( ! still2branch)
			solutionLvl = myLvl;
		return still2branch;
//    }
//    return false;
  }
  
  template <class View, class Val, class ViewSel, class ValSel>
  Gecode::ExecStatus
  FirstSolBranching<View,Val,ViewSel,ValSel>::commit(Gecode:: Space* home, const Gecode::BranchingDesc* d, unsigned int a) {
  	if ( solutionLvl != 0 ) { 
    	if (myLvl == 0 )
    		solutionLvl = 0;
    	x[0].le(home, x[0].min()); // makes the space to fail
    	return Gecode::ES_FAILED;
    } else {
	  	myLvl++;
    	return Gecode::ViewValBranching<View,Val,ViewSel,ValSel>::commit(home,d,a);
    }
  }
